{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\proj\\\\final_meals_app\\\\src\\\\components\\\\Cart\\\\CheckOut.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react';\nimport classes from './CheckOut.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isEmpty = string => {\n  const value = string.value;\n\n  if (typeof value !== 'string') {\n    console.log('value? ' + value.trim().length === '');\n    return string.trim() === '';\n  }\n\n  console.log('string? ' + string.value);\n};\n\nconst isFiveChars = string => {\n  const zip = string.value;\n\n  if (typeof zip === 'string') {\n    console.log('zip? ' + zip.trim().length !== 5);\n    return zip.trim().length !== 5;\n  }\n\n  console.log('string? ' + string.value);\n};\n\nconst Checkout = props => {\n  _s();\n\n  const [formInputsValidity, setFormInputsValidity] = useState({\n    name: true,\n    street: true,\n    city: true,\n    postalCode: true\n  });\n  const nameInputRef = useRef();\n  const streetInputRef = useRef();\n  const postalCodeInputRef = useRef();\n  const cityInputRef = useRef();\n\n  const confirmHandler = event => {\n    event.preventDefault();\n    const enteredName = nameInputRef.current.value;\n    const enteredStreet = streetInputRef.current.value;\n    const enteredPostalCode = postalCodeInputRef.current.value;\n    const enteredCity = cityInputRef.current.value;\n    const enteredNameIsValid = !isEmpty(enteredName);\n    const enteredStreetIsValid = !isEmpty(enteredStreet);\n    const enteredCityIsValid = !isEmpty(enteredCity);\n    const enteredPostalCodeIsValid = isFiveChars(enteredPostalCode);\n    setFormInputsValidity({\n      name: enteredNameIsValid,\n      street: enteredStreetIsValid,\n      city: enteredCityIsValid,\n      postalCode: enteredPostalCodeIsValid\n    });\n    const formIsValid = enteredNameIsValid && enteredStreetIsValid && enteredCityIsValid && enteredPostalCodeIsValid;\n\n    if (!formIsValid) {\n      return;\n    }\n\n    props.onConfirm({\n      name: enteredName.value,\n      street: enteredStreet.value,\n      city: enteredCity.value,\n      postalCode: enteredPostalCode.value\n    }); // Submit cart data\n  };\n\n  const nameControlClasses = `${classes.control} ${formInputsValidity.name ? '' : classes.invalid}`;\n  const streetControlClasses = `${classes.control} ${formInputsValidity.street ? '' : classes.invalid}`;\n  const postalCodeControlClasses = `${classes.control} ${formInputsValidity.postalCode ? '' : classes.invalid}`;\n  const cityControlClasses = `${classes.control} ${formInputsValidity.city ? '' : classes.invalid}`;\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    onSubmit: confirmHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        ref: nameInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), !formInputsValidity.name && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid name!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 38\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: streetControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"street\",\n        children: \"Street\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"street\",\n        ref: streetInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), !formInputsValidity.street && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid street!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 40\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: postalCodeControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postal\",\n        children: \"Postal Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postal\",\n        ref: postalCodeInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), !formInputsValidity.postalCode && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid postal code (5 characters long)!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cityControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"city\",\n        ref: cityInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), !formInputsValidity.city && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid city!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 38\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: props.onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.submit,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkout, \"HrmUUQKM0w7VSAcs5yd+fp84/4w=\");\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"names":["useRef","useState","classes","isEmpty","string","value","console","log","trim","length","isFiveChars","zip","Checkout","props","formInputsValidity","setFormInputsValidity","name","street","city","postalCode","nameInputRef","streetInputRef","postalCodeInputRef","cityInputRef","confirmHandler","event","preventDefault","enteredName","current","enteredStreet","enteredPostalCode","enteredCity","enteredNameIsValid","enteredStreetIsValid","enteredCityIsValid","enteredPostalCodeIsValid","formIsValid","onConfirm","nameControlClasses","control","invalid","streetControlClasses","postalCodeControlClasses","cityControlClasses","form","actions","onCancel","submit"],"sources":["C:/Users/USER/Desktop/proj/final_meals_app/src/components/Cart/CheckOut.js"],"sourcesContent":["import { useRef, useState } from 'react';\r\n\r\nimport classes from './CheckOut.module.css';\r\n\r\nconst isEmpty = (string) => {\r\n    const value = string.value\r\n    if (typeof value !== 'string') {\r\n      console.log('value? ' + value.trim().length === '')\r\n      return string.trim() === ''\r\n    }\r\n    console.log('string? ' + string.value)\r\n  }\r\n  const isFiveChars = (string) => {\r\n    const zip = string.value\r\n    if (typeof zip === 'string') {\r\n      console.log('zip? ' + zip.trim().length !== 5)\r\n      return zip.trim().length !== 5\r\n    }\r\n    console.log('string? ' + string.value)\r\n  }\r\n\r\nconst Checkout = (props) => {\r\n  const [formInputsValidity, setFormInputsValidity] = useState({\r\n    name: true,\r\n    street: true,\r\n    city: true,\r\n    postalCode: true,\r\n  });\r\n\r\n  const nameInputRef = useRef();\r\n  const streetInputRef = useRef();\r\n  const postalCodeInputRef = useRef();\r\n  const cityInputRef = useRef();\r\n\r\n  const confirmHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const enteredName = nameInputRef.current.value;\r\n    const enteredStreet = streetInputRef.current.value;\r\n    const enteredPostalCode = postalCodeInputRef.current.value;\r\n    const enteredCity = cityInputRef.current.value;\r\n\r\n    const enteredNameIsValid = !isEmpty(enteredName);\r\n    const enteredStreetIsValid = !isEmpty(enteredStreet);\r\n    const enteredCityIsValid = !isEmpty(enteredCity);\r\n    const enteredPostalCodeIsValid = isFiveChars(enteredPostalCode);\r\n\r\n    setFormInputsValidity({\r\n      name: enteredNameIsValid,\r\n      street: enteredStreetIsValid,\r\n      city: enteredCityIsValid,\r\n      postalCode: enteredPostalCodeIsValid,\r\n    });\r\n\r\n    const formIsValid =\r\n      enteredNameIsValid &&\r\n      enteredStreetIsValid &&\r\n      enteredCityIsValid &&\r\n      enteredPostalCodeIsValid;\r\n\r\n    if (!formIsValid) {\r\n      return;\r\n    }\r\n    props.onConfirm({\r\n        name: enteredName.value,\r\n        street: enteredStreet.value,\r\n        city: enteredCity.value,\r\n        postalCode: enteredPostalCode.value,\r\n      })\r\n\r\n    // Submit cart data\r\n  };\r\n\r\n  const nameControlClasses = `${classes.control} ${\r\n    formInputsValidity.name ? '' : classes.invalid\r\n  }`;\r\n  const streetControlClasses = `${classes.control} ${\r\n    formInputsValidity.street ? '' : classes.invalid\r\n  }`;\r\n  const postalCodeControlClasses = `${classes.control} ${\r\n    formInputsValidity.postalCode ? '' : classes.invalid\r\n  }`;\r\n  const cityControlClasses = `${classes.control} ${\r\n    formInputsValidity.city ? '' : classes.invalid\r\n  }`;\r\n\r\n  return (\r\n    <form className={classes.form} onSubmit={confirmHandler}>\r\n      <div className={nameControlClasses}>\r\n        <label htmlFor='name'>Your Name</label>\r\n        <input type='text' id='name' ref={nameInputRef} />\r\n        {!formInputsValidity.name && <p>Please enter a valid name!</p>}\r\n      </div>\r\n      <div className={streetControlClasses}>\r\n        <label htmlFor='street'>Street</label>\r\n        <input type='text' id='street' ref={streetInputRef} />\r\n        {!formInputsValidity.street && <p>Please enter a valid street!</p>}\r\n      </div>\r\n      <div className={postalCodeControlClasses}>\r\n        <label htmlFor='postal'>Postal Code</label>\r\n        <input type='text' id='postal' ref={postalCodeInputRef} />\r\n        {!formInputsValidity.postalCode && (\r\n          <p>Please enter a valid postal code (5 characters long)!</p>\r\n        )}\r\n      </div>\r\n      <div className={cityControlClasses}>\r\n        <label htmlFor='city'>City</label>\r\n        <input type='text' id='city' ref={cityInputRef} />\r\n        {!formInputsValidity.city && <p>Please enter a valid city!</p>}\r\n      </div>\r\n      <div className={classes.actions}>\r\n        <button type='button' onClick={props.onCancel}>\r\n          Cancel\r\n        </button>\r\n        <button className={classes.submit}>Confirm</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Checkout;"],"mappings":"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"},"metadata":{},"sourceType":"module"}